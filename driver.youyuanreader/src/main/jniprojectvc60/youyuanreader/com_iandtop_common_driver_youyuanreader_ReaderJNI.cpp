/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <windows.h>
#include <stdio.h>
#define __in
#define __in_z
#define __in_z_opt
#define __inout
#define __out

#include "com_iandtop_common_driver_youyuanreader_ReaderJNI.h"
#include "RdrReader9D00U.h"

JNIEXPORT jint JNICALL Java_com_iandtop_common_driver_youyuanreader_ReaderJNI_getVersion
(JNIEnv *, jclass)
{
	return 1;
}

JNIEXPORT jint JNICALL Java_com_iandtop_common_driver_youyuanreader_ReaderJNI_openPort
(JNIEnv* env, jclass, jstring port)
{
	char* rtn = NULL;
	jclass clsstring = env->FindClass("java/lang/String");
	jstring strencode = env->NewStringUTF("utf-8");
	jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
	jbyteArray barr= (jbyteArray)env->CallObjectMethod(port, mid, strencode);
	jsize alen = env->GetArrayLength(barr);
	jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
	if (alen > 0)
	{		
		rtn = (char*)malloc(alen + 1);
		memcpy(rtn, ba, alen);
		rtn[alen] = 0;
	}
	env->ReleaseByteArrayElements(barr, ba, 0);

	int result = RdrOpenPort(rtn);
	return result;
}


JNIEXPORT jint JNICALL Java_com_iandtop_common_driver_youyuanreader_ReaderJNI_closePort
  (JNIEnv* env, jclass, jstring port)
{
	char* rtn = NULL;
	jclass clsstring = env->FindClass("java/lang/String");
	jstring strencode = env->NewStringUTF("utf-8");
	jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
	jbyteArray barr= (jbyteArray)env->CallObjectMethod(port, mid, strencode);
	jsize alen = env->GetArrayLength(barr);
	jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
	if (alen > 0)
	{		
		rtn = (char*)malloc(alen + 1);
		memcpy(rtn, ba, alen);
		rtn[alen] = 0;
	}
	env->ReleaseByteArrayElements(barr, ba, 0);
	int result = RdrClosePort(rtn);
	return result;
}

JNIEXPORT jstring JNICALL Java_com_iandtop_common_driver_youyuanreader_ReaderJNI_readEPC
  (JNIEnv* env, jclass, jstring port)
{
	char* fail = "-1";
	char* paramerror = "-2";
	char* comfail = "-5";
	char epccode[1024] = "";
	char* rtn = NULL;
	jclass clsstring = env->FindClass("java/lang/String");
	jstring strencode = env->NewStringUTF("utf-8");
	jmethodID mid = env->GetMethodID(clsstring, "getBytes", "(Ljava/lang/String;)[B");
	jbyteArray barr= (jbyteArray)env->CallObjectMethod(port, mid, strencode);
	jsize alen = env->GetArrayLength(barr);
	jbyte* ba = env->GetByteArrayElements(barr, JNI_FALSE);
	if (alen > 0)
	{		
		rtn = (char*)malloc(alen + 1);
		memcpy(rtn, ba, alen);
		rtn[alen] = 0;
	}
	env->ReleaseByteArrayElements(barr, ba, 0);

	int result = RdrGroupReadEPC(rtn,epccode);
	
	switch(result)
	{
		case -1:
			strcpy(epccode,fail);
		case -2:
			strcpy(epccode,paramerror);
		case -5:
			strcpy(epccode,comfail);
	}

	jmethodID ctorID = env->GetMethodID(clsstring, "<init>", "([BLjava/lang/String;)V");
	jbyteArray bytes = env->NewByteArray(strlen(epccode));
	env->SetByteArrayRegion(bytes, 0, strlen(epccode), (jbyte*)epccode);
	jstring encoding = env->NewStringUTF("utf-8");
	return (jstring)env->NewObject(clsstring, ctorID, bytes, encoding);
}